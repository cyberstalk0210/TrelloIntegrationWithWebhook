package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrelloWebhookAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrelloWebhookAllPropertiesEquals(TrelloWebhook expected, TrelloWebhook actual) {
        assertTrelloWebhookAutoGeneratedPropertiesEquals(expected, actual);
        assertTrelloWebhookAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrelloWebhookAllUpdatablePropertiesEquals(TrelloWebhook expected, TrelloWebhook actual) {
        assertTrelloWebhookUpdatableFieldsEquals(expected, actual);
        assertTrelloWebhookUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrelloWebhookAutoGeneratedPropertiesEquals(TrelloWebhook expected, TrelloWebhook actual) {
        assertThat(actual)
            .as("Verify TrelloWebhook auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrelloWebhookUpdatableFieldsEquals(TrelloWebhook expected, TrelloWebhook actual) {
        assertThat(actual)
            .as("Verify TrelloWebhook relevant properties")
            .satisfies(a -> assertThat(a.getTrelloWebhookId()).as("check trelloWebhookId").isEqualTo(expected.getTrelloWebhookId()))
            .satisfies(a -> assertThat(a.getIdModel()).as("check idModel").isEqualTo(expected.getIdModel()))
            .satisfies(a -> assertThat(a.getCallbackUrl()).as("check callbackUrl").isEqualTo(expected.getCallbackUrl()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getLastReceivedAt()).as("check lastReceivedAt").isEqualTo(expected.getLastReceivedAt()))
            .satisfies(a -> assertThat(a.getSecret()).as("check secret").isEqualTo(expected.getSecret()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrelloWebhookUpdatableRelationshipsEquals(TrelloWebhook expected, TrelloWebhook actual) {
        // empty method
    }
}
